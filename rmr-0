#!/bin/bash
#set -vx
#trap read debug
# Last modified:  Mon Mar 20 11:30:42 PM EDT 2023
# Last modified: Sun Apr 28 08:35:20 AM EDT 2024
# version 0.02

bold=$(tput bold)
tput0=$(tput sgr0)
scriptname="$(realpath "$0")"
red="$(tput setaf 9)"

pause(){ read -p "$*" ; }

editscript(){
  local scriptname script path swp; scriptname=$(realpath "$0" 2>/dev/null); script="${scriptname##*/}"; path="${scriptname%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptname") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptname" "$swp"; exit ;}

fn_rmfile(){
    printf '%s\n%s is a file:\n' "$bold" "$1"
    ls -ltr "$1"
    printf '\nrmr: remove this file? (y/n) %s' "$tput0"
    old_stty_cfg=$(stty -g)	# https://stackoverflow.com/questions/226703/how-do-i-prompt-for-yes-no-cancel-input-in-a-linux-shell-script
    stty raw -echo
    answer=$(head -c 1)
    stty "$old_stty_cfg" 	# Careful playing with stty

    if [ "$answer" != "${answer#[Yy]}" ]
      then
        ${SUDO} rm "$1"
        printf '\n\n'
        if [ ! -e "$1" ]
          then
            printf '\nDone! File \"%s\" removed.\n\n' "$1"
          else
            printf '\n\n%s%s not removed, check permissions:\n\n' "$bold" "$1"
            ls -ltr "$1"
        fi
      else
        printf '\n\n%sFiles remain:\n%s \n%s\n' "$red" "$(ls -ltr "$1")" "$tput0"
    fi

######################################################################################################
#	There isn't really anything wrong with this code, but the above method removes the CR
#	There're other ways to do this https://stackoverflow.com/questions/226703/how-do-i-prompt-for-yes-no-cancel-input-in-a-linux-shell-script

}
##--> fn_rmfile() <--#################################################################################

remotefn() {
[[ "$(uname -n)" != "$servername" ]] && REMOTE="ssh -p $sshport $server"
#printf '\nssh server name: %s\nssh server port: %s\n        ssh url: %s\n  REMOTE PREFIX: %s\n\n\n' "$servername"
"$sshport" "$server" "$REMOTE"
}



checkwrite(){
  readarray -t cliargs <<< "${@:1}"
  [[ -e "${cliargs[@]}" ]] && multiple=false

  [[ -e "${cliargs[0]}" ]] && [[ -e "${cliargs[1]}" ]] && multiple=true &&
    if [[ "$multiple"=true ]]; then
      for i in "${cliargs[@]}"; do
        if [[ ! -w "$i" ]]; then
          read -rp "Unwriteable files; elevate to sudo? (Y/n) " confirm
          case "${confirm:-y}" in
          Y* | y*) SUDO="sudo"; sudo -v ;;
#          Y* | y*) while (( "$?" > 0 )); do sudo -v; done ;;
          *) exit 1 ;;
          esac
        fi
        if [[ "$i" = *\/* ]]; then
          echo "is a dir"
          exit
        fi
      done
  elif [[ "$multiple"=flase ]]; then
    if [[ ! -w "${cliargs[@]}" ]]; then
      read -rp "Unwriteable files; elevate to sudo? (Y/n) " confirm
      case "${confirm:-y}" in
        Y* | y*) SUDO="sudo"; sudo -v ;;
#       Y* | y*) while (( "$?" > 0 )); do sudo -v; done ;;
        *) exit 1 ;;
      esac
    fi
  fi
  

}



##--> fn_rmfile() <--#################################################################################


[[ "$1" == @(edit|e|nano|-e|-E) ]] && editscript

checkwrite "$@"

for path in "$@"
  do
    if [[ -d "$path" ]]
      then

	    printf '%s\n' "$bold"
	    if ${SUDO} rmdir "$path" 2>/dev/null; then
	        printf 'Removing empty directory %s... \n\n$ ls %s/ \n%s\n' "$(readlink -f "$path")" "$path" "$(ls "$path" 2>/dev/null)"
	    else
	        printf '\nRemoving %s... \n\n$ find "%s" \n%s\n' "$(readlink -f "$path")" "$path" "$(find "$path" 2>/dev/null)"
	        ${SUDO} rm -rI "$path"
       	  printf '%s' "$tput0"
    	fi

  	 if [ ! -e "$path" ]; then
      	   printf '\nDone!\n'
      else
      	   printf '\n\n%sRemoval Failed!%s\n\n%s is still present check ownership and permissions:\n' "$bold" "$tput0" "$path"
      	   ls -lad --color=always "$path"
	   fi

    elif [[ -f "$path" ]]; then
      fn_rmfile "$path"

    else
       printf '\n\n No such directory or file found!\n\n'

    fi

  done







exit






#
# this does not work because -e in  if [ -e ... ]  does not work with globs:  https://www.shellcheck.net/wiki/SC2144
#
#if [[ -d "$1" ]]
# then
#   if [ ! -e "$1"/* ]
#    then
#	.
#	.
#	.
#   else
#	printf "%s\n" "$bold"
#	find "$1"
#	printf "\n"
#	rm -rI "$1"
#	printf "%s" "$tput0"
#	if [ ! -e "$1" ]; then printf "\nDone!\n"; else printf "\n"$1" is still present check ownership and permissions:\n"; ls -glad --color=always "$1" ; fi
#   fi



